// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  email                   String    @unique
  password                String? // nullable because OAuth accounts may not have a password
  role                    Role      @default(USER)
  isVerified              Boolean   @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  resetPasswordToken      String?
  resetPasswordExpiry     DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  profile  Profile?
  posts    Post[]
  sessions Session[]
  accounts Account[] // OAuth/social logins
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  bio       String?
  avatarUrl String?
  age       Int?
  user      User    @relation(fields: [userId], references: [id])
}

model Post {
  id         String   @id @default(uuid())
  title      String
  content    String?
  coverImage String?
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  published  Boolean  @default(false)
  readTime   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([sessionToken])
  @@index([expiresAt])
}

model Account {
  id                String    @id @default(uuid())
  userId            String
  provider          String // e.g., "google", "github"
  providerAccountId String // unique ID from provider
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  tokenType         String?
  scope             String?
  idToken           String?
  user              User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}
